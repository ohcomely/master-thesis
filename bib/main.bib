@book{Kaeslin08,
  author    = {Kaeslin, Hubert},
  title     = {Digital Integrated Circuit Design: From VLSI Architectures to CMOS Fabrication},
  publisher = {Cambridge University Press},
  month     = apr,
  year      = {2008}
}

@book{HVM04,
  author    = {Hankerson, D.R. and Vanstone, S.A. and Menezes, A.J.},
  title     = {Guide to Elliptic Curve Cryptography},
  series    = {Springer Professional Computing},
  publisher = {Springer},
  year      = {2004}
}

@manual{FIPS197,
  title        = {Advanced Encryption Standard (AES) (FIPS PUB 197)},
  author       = {NIST},
  organization = {National Institute of Standards and Technology},
  month        = nov,
  year         = {2001}
}

@inproceedings{RBBK01,
  author    = {Phillip Rogaway and Mihir Bellare and John Black and Ted Krovetz},
  title     = {{OCB}: A Block-Cipher Mode of Operation for Efficient Authenticated Encryption},
  booktitle = {ACM Conference on Computer and Communications Security},
  year      = {2001},
  pages     = {196--205}
}

@electronic{Virtex6UG1111,
  author = {Xilinx},
  month  = nov,
  year   = {2011},
  title  = {{Virtex-6 FPGA Configuration User Guide}},
  note   = {UG360 (v3.4)},
  url    = {http://www.xilinx.com/support/documentation/user_guides/ug360.pdf}
}

@electronic{XilinxBib:Series7UG1110,
  author = {Xilinx},
  month  = oct,
  year   = {2011},
  title  = {{7 Series FPGAs Configuration User Guide}},
  note   = {UG470 (v1.2)},
  url    = {http://www.xilinx.com/support/documentation/user_guides/ug470_7Series_Config.pdf}
}

@misc{WIKI:Newton,
  author = {Wikipedia},
  title  = {{Isaac Newton}},
  note   = {Accessed October 1, 2012},
  url    = {http://en.wikipedia.org/w/index.php?title=Isaac_Newton&oldid=514997436}
}



@article{lipton_generalized_1979,
  title    = {Generalized {Nested} {Dissection}},
  volume   = {16},
  issn     = {0036-1429},
  url      = {https://epubs.siam.org/doi/10.1137/0716027},
  doi      = {10.1137/0716027},
  abstract = {We make a precise recommendation for the choice of dissection sets for George’s [4] nested dissection on a square \$n {\textbackslash}times n\$ grid with n not a power of 2 and make some experimental comparisons with the direct use of the minimal degree algorithm of Markowitz [5]. Our results additionally indicate that the performance of the minimal degree algorithm can be significantly influenced by the way in which ties are broken. We also discuss the dissection of irregularly shaped regions and the extension of George’s ordering to three-dimensional regions.},
  number   = {2},
  urldate  = {2025-08-16},
  journal  = {SIAM Journal on Numerical Analysis},
  author   = {Lipton, Richard J. and Rose, Donald J. and Tarjan, Robert Endre},
  month    = apr,
  year     = {1979},
  note     = {Publisher: Society for Industrial and Applied Mathematics},
  pages    = {346--358},
  file     = {Full Text PDF:/home/ranjan/snap/zotero-snap/common/Zotero/storage/QHD8KQRW/Lipton et al. - 1979 - Generalized Nested Dissection.pdf:application/pdf}
}


@article{george_nested_1973,
  title    = {Nested {Dissection} of a {Regular} {Finite} {Element} {Mesh}},
  volume   = {10},
  issn     = {0036-1429},
  url      = {https://epubs.siam.org/doi/10.1137/0710032},
  doi      = {10.1137/0710032},
  abstract = {J. A. George has discovered a method, called nested dissection, for solving a system of linear equations defined on an \$n = k {\textbackslash}times k\$ square grid in \$O(n{\textbackslash}log n)\$ and space \$O(n{\textasciicircum}\{\{3 /2\}\} )\$ time. We generalize this method without degrading the time and space bounds so that it applies to any system of equations defined on a planar or almost-planar graph. Such systems arise in the solution of two-dimensional finite element problems. Our method uses the fact that planar graphs have good separators.More generally, we show that sparse Gaussian elimination is efficient for any class of graphs which have good separators, and conversely that graphs without good separators (including “almost all” sparse graphs) are not amenable to sparse Gaussian elimination.},
  number   = {2},
  urldate  = {2025-08-16},
  journal  = {SIAM Journal on Numerical Analysis},
  author   = {George, Alan},
  month    = apr,
  year     = {1973},
  note     = {Publisher: Society for Industrial and Applied Mathematics},
  pages    = {345--363},
  file     = {Full Text PDF:/home/ranjan/snap/zotero-snap/common/Zotero/storage/WDPYSJRZ/George - 1973 - Nested Dissection of a Regular Finite Element Mesh.pdf:application/pdf}
}


@article{merrill_scalable_nodate,
  title    = {Scalable {GPU} {Graph} {Traversal}},
  abstract = {Breadth-first search (BFS) is a core primitive for graph traversal and a basis for many higher-level graph analysis algorithms. It is also representative of a class of parallel computations whose memory accesses and work distribution are both irregular and data-dependent. Recent work has demonstrated the plausibility of GPU sparse graph traversal, but has tended to focus on asymptotically inefficient algorithms that perform poorly on graphs with non-trivial diameter.},
  language = {en},
  author   = {Merrill, Duane},
  file     = {PDF:/home/ranjan/snap/zotero-snap/common/Zotero/storage/QTE95T3H/Merrill - Scalable GPU Graph Traversal.pdf:application/pdf}
}

@misc{kaleta_kaletapbfs-cuda-gpu_2025,
  title    = {kaletap/bfs-cuda-gpu},
  url      = {https://github.com/kaletap/bfs-cuda-gpu},
  abstract = {Implementation of parallel Breadth First Algorithm for graph traversal using CUDA and C++ language.},
  urldate  = {2025-08-19},
  author   = {Kaleta, Przemysław},
  month    = may,
  year     = {2025},
  note     = {original-date: 2019-11-14T12:55:50Z}
}

@misc{chang2025parallelizingapproximateminimumdegree,
  title         = {Parallelizing the Approximate Minimum Degree Ordering Algorithm: Strategies and Evaluation},
  author        = {Yen-Hsiang Chang and Aydın Buluç and James Demmel},
  year          = {2025},
  eprint        = {2504.17097},
  archiveprefix = {arXiv},
  primaryclass  = {cs.DC},
  url           = {https://arxiv.org/abs/2504.17097}
}


@article{yannakakis_computing_1981,
  title    = {Computing the {Minimum} {Fill}-{In} is {NP}-{Complete}},
  volume   = {2},
  issn     = {0196-5212},
  url      = {https://epubs.siam.org/doi/10.1137/0602010},
  doi      = {10.1137/0602010},
  abstract = {We use the notion of potential maximal clique to characterize the maximal cliques appearing in minimal triangulations of a graph. We show that if these objects can be listed in polynomial time for a class of graphs, the treewidth and the minimum fill-in are polynomially tractable for these graphs. We prove that for all classes of graphs for which polynomial algorithms computing the treewidth and the minimum fill-in exist, we can list their potential maximal cliques in polynomial time. Our approach unifies these algorithms. Finally we show how to compute in polynomial time the potential maximal cliques of weakly triangulated graphs for which the treewidth and the minimum fill-in problems were open.},
  number   = {1},
  urldate  = {2025-09-09},
  journal  = {SIAM Journal on Algebraic Discrete Methods},
  author   = {Yannakakis, Mihalis},
  month    = mar,
  year     = {1981},
  note     = {Publisher: Society for Industrial and Applied Mathematics},
  pages    = {77--79},
  file     = {Full Text PDF:/home/ranjan/snap/zotero-snap/common/Zotero/storage/2BAJ996G/Yannakakis - 1981 - Computing the Minimum Fill-In is NP-Complete.pdf:application/pdf}
}


@article{catalyurek_hypergraph_2011,
  title    = {Hypergraph {Partitioning}-{Based} {Fill}-{Reducing} {Ordering} for {Symmetric} {Matrices}},
  volume   = {33},
  issn     = {1064-8275},
  url      = {https://epubs.siam.org/doi/10.1137/090757575},
  doi      = {10.1137/090757575},
  abstract = {We consider two-dimensional partitioning of general sparse matrices for parallel sparse matrix-vector multiply operation. We present three hypergraph-partitioning-based methods, each having unique advantages. The first one treats the nonzeros of the matrix individually and hence produces fine-grain partitions. The other two produce coarser partitions, where one of them imposes a limit on the number of messages sent and received by a single processor, and the other trades that limit for a lower communication volume. We also present a thorough experimental evaluation of the proposed two-dimensional partitioning methods together with the hypergraph-based one-dimensional partitioning methods, using an extensive set of public domain matrices. Furthermore, for the users of these partitioning methods, we present a partitioning recipe that chooses one of the partitioning methods according to some matrix characteristics.},
  number   = {4},
  urldate  = {2025-09-11},
  journal  = {SIAM Journal on Scientific Computing},
  author   = {\c{C}ataly\"urek, \"Umit V. and Aykanat, Cevdet and Kayaaslan, Enver},
  month    = jan,
  year     = {2011},
  note     = {Publisher: Society for Industrial and Applied Mathematics},
  keywords = {Google Scholar, OpenURL},
  pages    = {1996--2023},
  file     = {Full Text PDF:/home/ranjan/snap/zotero-snap/common/Zotero/storage/RJ8YYZG2/Çatalyürek et al. - 2011 - Hypergraph Partitioning-Based Fill-Reducing Ordering for Symmetric Matrices.pdf:application/pdf}
}


@inproceedings{dasgupta_alpha_2023,
  address    = {Berlin, Heidelberg},
  title      = {Alpha {Elimination}: {Using} {Deep} {Reinforcement} {Learning} to {Reduce} {Fill}-{In} {During} {Sparse} {Matrix} {Decomposition}},
  isbn       = {978-3-031-43420-4},
  shorttitle = {Alpha {Elimination}},
  url        = {https://doi.org/10.1007/978-3-031-43421-1_28},
  doi        = {10.1007/978-3-031-43421-1_28},
  abstract   = {A large number of computational and scientific methods commonly require decomposing a sparse matrix into triangular factors as LU decomposition. A common problem faced during this decomposition is that even though the given matrix may be very sparse, the decomposition may lead to a denser triangular factors due to fill-in. A significant fill-in may lead to prohibitively larger computational costs and memory requirement during decomposition as well as during the solve phase. To this end, several heuristic sparse matrix reordering methods have been proposed to reduce fill-in before the decomposition. However, finding an optimal reordering algorithm that leads to minimal fill-in during such decomposition is known to be a NP-hard problem. A reinforcement learning based approach is proposed for this problem. The sparse matrix reordering problem is formulated as a single player game. More specifically, Monte-Carlo tree search in combination with neural network is used as a decision making algorithm to search for the best move in our game. The proposed method, Alpha Elimination is found to produce significantly lesser non-zeros in the LU decomposition as compared to existing state-of-the-art heuristic algorithms with little to no increase in overall running time of the algorithm. The code for the project is publicly available ().},
  urldate    = {2025-09-11},
  booktitle  = {Machine {Learning} and {Knowledge} {Discovery} in {Databases}: {Research} {Track}: {European} {Conference}, {ECML} {PKDD} 2023, {Turin}, {Italy}, {September} 18–22, 2023, {Proceedings}, {Part} {IV}},
  publisher  = {Springer-Verlag},
  author     = {Dasgupta, Arpan and Kumar, Pawan},
  month      = sep,
  year       = {2023},
  pages      = {472--488}
}


@article{yuan_fast_nodate,
  title    = {Fast {Sparse} {Matrix} {Reordering} on {GPU} for {Cholesky} {Based} {Solvers}},
  language = {en},
  author   = {Yuan, Changcheng},
  file     = {PDF:/home/ranjan/snap/zotero-snap/common/Zotero/storage/RL7CGAKD/Yuan - Fast Sparse Matrix Reordering on GPU for Cholesky Based Solvers.pdf:application/pdf}
}


@article{gilbert_jet_2024,
  title      = {Jet: {Multilevel} {Graph} {Partitioning} on {Graphics} {Processing} {Units}},
  volume     = {46},
  issn       = {1064-8275},
  shorttitle = {Jet},
  url        = {https://epubs.siam.org/doi/10.1137/23M1559129},
  doi        = {10.1137/23M1559129},
  abstract   = {A new format for storing sparse matrices is proposed for efficient sparse matrix-vector (SpMV) product calculation on modern graphics processing units (GPUs). This format extends the standard compressed row storage (CRS) format and can be quickly converted to and from  it. Computational performance of two SpMV kernels for the new format is determined for over 130 sparse matrices on Fermi-class and Kepler-class GPUs and compared with that of five existing generic algorithms and industrial  implementations, including Nvidia cuSparse CSR and HYB kernels. We found the speedup of up to \${\textbackslash}approx 60{\textbackslash}\% \$ over the best of the five alternative kernels.},
  number     = {5},
  urldate    = {2025-09-29},
  journal    = {SIAM Journal on Scientific Computing},
  author     = {Gilbert, Michael S. and Madduri, Kamesh and Boman, Erik G. and Rajamanickam, Siva},
  month      = oct,
  year       = {2024},
  note       = {Publisher: Society for Industrial and Applied Mathematics},
  pages      = {B700--B724},
  file       = {Submitted Version:/home/ranjan/snap/zotero-snap/common/Zotero/storage/AUZZFUXJ/Gilbert et al. - 2024 - Jet Multilevel Graph Partitioning on Graphics Processing Units.pdf:application/pdf}
}


@incollection{selvitopi_effect_2020,
  address   = {Cham},
  title     = {The {Effect} of {Various} {Sparsity} {Structures} on {Parallelism} and {Algorithms} to {Reveal} {Those} {Structures}},
  isbn      = {978-3-030-43736-7},
  url       = {https://doi.org/10.1007/978-3-030-43736-7_2},
  abstract  = {Structured sparse matrices can greatly benefit parallel numerical methods in terms of parallel performance and convergence. In this chapter, we present combinatorial models for obtaining several different sparse matrix forms. There are four basic forms we focus on: singly-bordered block-diagonal form, doubly-bordered block-diagonal form, nonempty off-diagonal block minimization, and block diagonal with overlap form. For each of these forms, we first present the form in detail and describe what goals are sought within the form, and then examine the combinatorial models that attain the respective form while targeting the sought goals, and finally explain in which aspects the forms benefit certain parallel numerical methods and their relationship with the models. Our work focuses especially on graph and hypergraph partitioning models in obtaining the mentioned forms. Despite their relatively high preprocessing overhead compared to other heuristics, they have proven to model the given problem more accurately and this overhead can be often amortized due the fact that matrix structure does not change much during a typical numerical simulation. This chapter presents a number of models and their relationship with parallel numerical methods.},
  language  = {en},
  urldate   = {2025-09-18},
  booktitle = {Parallel {Algorithms} in {Computational} {Science} and {Engineering}},
  publisher = {Springer International Publishing},
  author    = {Selvitopi, Oguz and Acer, Seher and Manguoğlu, Murat and Aykanat, Cevdet},
  editor    = {Grama, Ananth and Sameh, Ahmed H.},
  year      = {2020},
  doi       = {10.1007/978-3-030-43736-7_2},
  pages     = {35--62},
  file      = {Full Text PDF:/home/ranjan/snap/zotero-snap/common/Zotero/storage/2C9CQ26I/Selvitopi et al. - 2020 - The Effect of Various Sparsity Structures on Parallelism and Algorithms to Reveal Those Structures.pdf:application/pdf}
}
